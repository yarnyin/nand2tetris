// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical square. */
class Circle {

   field int x, y; // screen location of the circle's center
   field int radius; // length of this square, in pixels

   /** Constructs a new square with a given location and size. */
   constructor Circle new(int Ax, int Ay, int Aradius) {
      let x = Ax;
      let y = Ay;
      let radius = Aradius;
      do draw();
      return this;
   }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawCircle(x, y, radius);
      return;
   }

   /** Erases the square from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawCircle(x, y, radius);
      return;
   }

    /** Increments the square size by 2 pixels. */
   method void incSize() {
      if (((y + radius) < 254) & ((x + radius) < 510) & ((y - radius) > 1) & ((x - radius) > 1)) {
         do erase();
         let radius = radius + 2;
         do draw();
      }
      return;
   }

   /** Decrements the square size by 2 pixels. */
   method void decSize() {
      if (radius > 2) {
         do erase();
         let radius = radius - 2;
         do draw();
      }
      return;
   }

   /** Moves the square up by 2 pixels. */
   method void moveUp() {
      if (y > radius) {
         //do Screen.setColor(false);
         do erase();
         let y = y - 2;
         do Screen.setColor(true);
         do draw();
      }
      return;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
      if ((y + radius) < 254) {
         //do Screen.setColor(false);
         do erase();
         let y = y + 2;
         do Screen.setColor(true);
         do draw();
      }
      return;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
      if (x > radius) {
         //do Screen.setColor(false);
         do erase();
         let x = x - 2;
         do Screen.setColor(true);
         do draw();
      }
      return;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
      if ((x + radius) < 510) {
         //do Screen.setColor(false);
         do erase();
         let x = x + 2;
         do Screen.setColor(true);
         do draw();
      }
      return;
   }
}
