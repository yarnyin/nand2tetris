// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array screen ,bits;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = 16384;
        let bits = Array.new(17);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;
        let bits[16] = 0;
        return ;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = 0;
        while (address < 8192) {
            let screen[address] = 0;
            let address = address + 1;
        }
        return ;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return ;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        //let div = x/16;
        let address = (32*y) + (x/16);
        //let value = Memory.peek(16384 + address);
        let mask = bits[x&15];
        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }
        //do Memory.poke(16384 + address, value);
        return ;
    }

    function void draw_horizontal_line(int x1, int x2, int y) {
        var int tmp, addr1, addr2, mask1, mask2;
        //make sure x1 <= x2
        if (x2 < x1) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }
        let tmp = y*32;
        let addr1 = tmp + (x1/16);
        let addr2 = tmp + (x2/16);
        let tmp = x1 & 15;
        let mask1 = ~(bits[tmp]-1);
        let tmp = x2 & 15;
        let mask2 = bits[tmp+1] - 1;
        //handle head and tail
        if (addr1 = addr2) {//short line
            if (color) {//set
                let screen[addr1] = screen[addr1] | (mask1 & mask2);
            } else {//clr
                let screen[addr1] = screen[addr1] & ~(mask1 & mask2);
            }
        } else {
            if (color) {//set
                let screen[addr1] = screen[addr1] | mask1;
                let screen[addr2] = screen[addr2] | mask2;
            } else {//clr
                let screen[addr1] = screen[addr1] & ~mask1;
                let screen[addr2] = screen[addr2] & ~mask2;
            }
        }
        //middle(fast)
        let addr1 = addr1 + 1;
        while (addr1 < addr2) {
            //do Memory.poke(16384+y*32+x1/16, color);
            let screen[addr1] = color;
            let addr1 = addr1 + 1;
        }
        return ;
    }

    function void draw_vertical_line(int x, int y1, int y2) {
        var int tmp, address, mask;
        if (y2 < y1) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let address = (y1 * 32) + (x/16);
        let mask = bits[x&15];
        while (~(y2 < y1)) {
            if (color) {
                let screen[address] = screen[address] | mask;
            } else {
                let screen[address] = screen[address] &~mask;
            }
            let address = address + 32;
            let y1 = y1 + 1;
        }
        return ;
    }
    
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, tmp, a, b, diff;
        if (y1 = y2) { //horizontal
            do Screen.draw_horizontal_line(x1, x2, y1);
        } else {
            if (x1 = x2) { //vertical
                do Screen.draw_vertical_line(x1, y1, y2);
            } else {//normal
                //make sure x1 < x2
                if (x2 < x1) {//swap (x1, y1) <==> (x2, y2)
                    let tmp = x1;
                    let x1 = x2;
                    let x2 = tmp;
                    let tmp = y1;
                    let y1 = y2;
                    let y2 = tmp;
                }

                let dx = x2 - x1;
                let dy = Math.max(y1, y2) - Math.min(y1, y2);
                let a = 0; let b = 0; let diff = 0;

                while ((~(dx < a)) & (~(dy < b))) {
                    if (y1 < y2) {//go northeast
                        do Screen.drawPixel(x1+a, y1+b);
                    } else {//go southeast
                        do Screen.drawPixel(x1+a, y1-b);
                    }
                    if (diff < 0) {
                        let a = a + 1; let diff = diff + dy;
                    } else {
                        let b = b + 1; let diff = diff - dx;
                    }
                }
            }
        }
        return ;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
     //must make this function fast
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int addr1, addr2, tmp1, tmp2, mask1, mask2;
        let tmp1 = y1*32;
        let addr1 = tmp1 + (x1/16);
        let addr2 = tmp1 + (x2/16);
        let tmp1 = x1 & 15;//x1 % 16
        let mask1 = ~(bits[tmp1]-1);
        let tmp2 = x2 & 15;
        let mask2 = bits[tmp2+1] - 1;
        while (~(y2 < y1)) {
            //do Screen.drawLine(x1, y1, x2, y1);
            let tmp1 = addr1; let tmp2 = addr2;
            //round left; round right
            if (tmp1 = tmp2) {//narrow rectangle
                if (color) {//set
                    let screen[tmp1] = screen[tmp1] | (mask1 & mask2);
                } else {//clr
                    let screen[tmp1] = screen[tmp1] & ~(mask1 & mask2);
                }
            } else {
                if (color) {
                    let screen[tmp1] = screen[tmp1] | mask1;
                    let screen[tmp2] = screen[tmp2] | mask2;
                } else {
                    let screen[tmp1] = screen[tmp1] & ~mask1;
                    let screen[tmp2] = screen[tmp2] & ~mask2;
                }
            }

            let tmp1 = tmp1 + 1;

            //fast
            while (tmp1 < tmp2) {
                let screen[tmp1] = color;
                let tmp1 = tmp1 + 1;
            }


            let addr1 = addr1 + 32;
            let addr2 = addr2 + 32;
            let y1 = y1 + 1;
        }
        return ;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, r_2;
        let dy = -r;
        let r_2 = r*r;
        while(~(0 < dy)) {
            let dx = Math.sqrt(r_2 - (dy*dy));
            do Screen.draw_horizontal_line(x-dx, x+dx, y+dy);
            do Screen.draw_horizontal_line(x-dx, x+dx, y-dy);
            let dy = dy + 1;
        }
        return ;
    }
}
