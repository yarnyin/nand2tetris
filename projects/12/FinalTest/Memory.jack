// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap_base, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap_base = 2048;
        let freeList = heap_base;
        let freeList[0] = 0;
        let freeList[1] = 16384 - 2048 - 2;
        return ;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    function void split(Array search, Array prev, int size) {
        let search[size] = search[0];
        let search[0] = 0;
        let search[size + 1] = search[1] - size;
        let search[1] = size - 2;
        if (prev = 0) { //search = freeList
            let freeList = freeList + size;
        } else {
            let prev[0] = search + size;
        }
        return ;
    }

    function int first_fit(int size) {
        var Array search, prev;
        let search = freeList;
        let size = size + 2;
        while (~(search=0)) {
            //let prev = search;
            if (~(search[1] < size)) { // find it
                //carve it
                do Memory.split(search, prev, size);
                return search;
            }
            let prev = search;
            let search = search[0];
        }
        return search;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array choosen;
        let choosen = Memory.first_fit(size);
        if (~(choosen=0)) {//find it
            let choosen = choosen + 2;
        }
        return choosen;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array node;
        let node = o - 2;
        //insert to the head
        let node[0] = freeList;
        let freeList = node;
        return ;
    }    
}
