// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    
    static Array bits;

    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384+16384;
        return ;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, res;
        let i = 0;
        let res = 0;
        while (i < 16) {
            if (bits[i] & y) {
                let res = res + x;
            }
            let x = x + x;
            let i = i + 1;
        }
        return res;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int calc_x, calc_y, res;
        var boolean neg_x, neg_y;
        let calc_x = Math.abs(x);
        let calc_y = Math.abs(y);
        let neg_x = x < 0;
        let neg_y = y < 0;
        let res = Math.real_divide(calc_x, calc_y);
        if (~(neg_x = neg_y)) {
            let res = -res;
        }
        return res;
    }

    function int real_divide(int x, int y) {
        var int q;
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math.real_divide(x, y+y);
        if ((x - (2*q*y)) < y) {
            return q + q;
        } else {
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, tmp;
        let y = 0;
        let i = 7;
        while (~(i < 0)) {
            let tmp = y + bits[i];
            if (tmp < 182) {
                if (~((tmp * tmp) > x)) {
                    let y = tmp;
                }
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            let a = b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) {
            let a = b;
        }
        return a;
    }

    function boolean bit_set(int value, int i) {
        return value | bits[i];
    }

    function boolean bit_clr(int value, int i) {
        return value & (~bits[i]);
    }
}
