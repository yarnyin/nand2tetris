// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, maxL;
    field Array str_arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str_arr = Array.new(maxLength);
        let length = 0;
        let maxL = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str_arr.dispose();
        return ;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        var char c;
        let c = 0;
        if (j < length) {
            let c = str_arr[j];
        }
        return c;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < length) {
            let str_arr[j] = c;
        }
        return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxL) {
            let str_arr[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int idx, res, tmp;
        var boolean neg;
        let res = 0;

        if (length = 0) {
            return res;
        }

        if (str_arr[0] = 45) {
            let idx = 1;
            let neg = true;
        } else {
            let idx = 0;
            let neg = false;
        }
        
        let tmp = str_arr[idx];
        while ((idx < length) & (tmp > 47) & (tmp < 58)) {//digit
            let res = (res*10) + (tmp - 48);
            let idx = idx + 1;
            let tmp = str_arr[idx];
        }

        if (neg) {
            let res = -res;
        }

        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0; //clear
        if (val < 0) {//neg
            do appendChar(45);//'-'
            //do Output.printInt(777);
            let val = -val;
        }

        do do_set_int(val);
        return ;
    }

    method void do_set_int(int val) {
        var int div;
        let div = val / 10;

        if (val > 9) {
            do do_set_int(div);
        }

        do appendChar(val - (div*10) + 48);
        return ;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
